package com.treeliked.darkme2.model.dao;

import com.treeliked.darkme2.model.dataobject.Memo;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Repository;

import java.util.List;

@Mapper
@Repository
public interface MemoMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memo
     *
     * @mbg.generated Sat Dec 22 11:01:22 CST 2018
     */
    @Delete({
            "delete from memo",
            "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memo
     *
     * @mbg.generated Sat Dec 22 11:01:22 CST 2018
     */
    @Insert({
            "insert into memo (id, memo_author, ",
            "memo_title, memo_content, ",
            "memo_type, memo_state, ",
            "memo_post_date)",
            "values (#{id,jdbcType=VARCHAR}, #{memoAuthor,jdbcType=VARCHAR}, ",
            "#{memoTitle,jdbcType=VARCHAR}, #{memoContent,jdbcType=VARCHAR}, ",
            "#{memoType,jdbcType=BIT}, #{memoState,jdbcType=TINYINT}, ",
            "#{memoPostDate,jdbcType=TIMESTAMP})"
    })
    int insert(Memo record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memo
     *
     * @mbg.generated Sat Dec 22 11:01:22 CST 2018
     */
    @Select({
            "select",
            "id, memo_author, memo_title, memo_content, memo_type, memo_state, memo_post_date",
            "from memo",
            "where id = #{id,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "memo_author", property = "memoAuthor", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_title", property = "memoTitle", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_content", property = "memoContent", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_type", property = "memoType", jdbcType = JdbcType.BIT),
            @Result(column = "memo_state", property = "memoState", jdbcType = JdbcType.TINYINT),
            @Result(column = "memo_post_date", property = "memoPostDate", jdbcType = JdbcType.TIMESTAMP)
    })
    Memo selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memo
     *
     * @mbg.generated Sat Dec 22 11:01:22 CST 2018
     */
    @Select({
            "select",
            "id, memo_author, memo_title, memo_content, memo_type, memo_state, memo_post_date",
            "from memo"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "memo_author", property = "memoAuthor", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_title", property = "memoTitle", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_content", property = "memoContent", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_type", property = "memoType", jdbcType = JdbcType.BIT),
            @Result(column = "memo_state", property = "memoState", jdbcType = JdbcType.TINYINT),
            @Result(column = "memo_post_date", property = "memoPostDate", jdbcType = JdbcType.TIMESTAMP)
    })
    List<Memo> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table memo
     *
     * @mbg.generated Sat Dec 22 11:01:22 CST 2018
     */
    @Update({
            "update memo",
            "set memo_author = #{memoAuthor,jdbcType=VARCHAR},",
            "memo_title = #{memoTitle,jdbcType=VARCHAR},",
            "memo_content = #{memoContent,jdbcType=VARCHAR},",
            "memo_type = #{memoType,jdbcType=BIT},",
            "memo_state = #{memoState,jdbcType=TINYINT},",
            "memo_post_date = #{memoPostDate,jdbcType=TIMESTAMP}",
            "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(Memo record);


    @Update("update memo set memo_state = #{state} where id = #{id}")
    int modifyMemoStateById(@Param("id") String id, @Param("state") int toState) throws Exception;


    @Select("select * from memo where binary memo_author = #{author} and (memo_title like CONCAT('%','${value}','%' ) or memo_content like CONCAT('%','${value}','%' ))")
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "memo_author", property = "memoAuthor", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_title", property = "memoTitle", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_content", property = "memoContent", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_type", property = "memoType", jdbcType = JdbcType.BIT),
            @Result(column = "memo_state", property = "memoState", jdbcType = JdbcType.TINYINT),
            @Result(column = "memo_post_date", property = "memoPostDate", jdbcType = JdbcType.TIMESTAMP)
    })
    List<Memo> searchMemo(@Param("author") String username, @Param("value") String u1);


    /**
     * 获取用户标签的数量
     *
     * @param username 用户名
     * @return 数量
     * @throws Exception 抛出所有异常
     */
    @Select("select count(*) from memo where binary memo_author = #{author}")
    int selectMemoCountByUser(@Param("author") String username) throws Exception;


    /**
     * 根据便签的状态获取用户标签
     *
     * @param username 用户名
     * @param finished 是否已经完成
     * @return memo 列表
     * @throws Exception 抛出所有异常
     */
    @Select("select * from memo where binary memo_author = #{author} and memo_state = #{state} order by memo_post_date desc")
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "memo_author", property = "memoAuthor", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_title", property = "memoTitle", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_content", property = "memoContent", jdbcType = JdbcType.VARCHAR),
            @Result(column = "memo_type", property = "memoType", jdbcType = JdbcType.BIT),
            @Result(column = "memo_state", property = "memoState", jdbcType = JdbcType.TINYINT),
            @Result(column = "memo_post_date", property = "memoPostDate", jdbcType = JdbcType.TIMESTAMP)
    })
    List<Memo> getUserMemosByState(@Param("author") String username, @Param("state") boolean finished) throws Exception;


}
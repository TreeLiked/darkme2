package com.treeliked.darkme2.model.dao;

import com.treeliked.darkme2.model.dataobject.User;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Component;

import java.util.List;

@Mapper
@Component
public interface UserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Tue Dec 18 18:09:49 CST 2018
     */
    @Delete({
            "delete from user",
            "where id = #{id,jdbcType=VARCHAR}"
    })
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Tue Dec 18 18:09:49 CST 2018
     */
    @Insert({
            "insert into user (id, name, ",
            "password, email, ",
            "is_man, create_time)",
            "values (#{id,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, ",
            "#{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, ",
            "#{isMan,jdbcType=BIT}, #{createTime,jdbcType=TIMESTAMP})"
    })
    int insert(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Tue Dec 18 18:09:49 CST 2018
     */
    @Select({
            "select",
            "id, name, password, email, is_man, create_time",
            "from user",
            "where id = #{id,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "name", property = "name", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
            @Result(column = "is_man", property = "isMan", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP)
    })
    User selectByPrimaryKey(String id);


    /**
     * 是否存在此用户
     *
     * @param username 用户名
     * @param password 密码
     * @return user model
     * @throws Exception 抛出所有异常
     */
    @Select({
            "select",
            "id, name, password, email, is_man, create_time",
            "from user",
            "where name = #{name,jdbcType=VARCHAR} and password = #{password,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "name", property = "name", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
            @Result(column = "is_man", property = "isMan", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP)
    })
    User hasMatchUser1(@Param("name") String username, @Param("password") String password) throws Exception;

    /**
     * 是否存在此用户
     *
     * @param email    用户名邮箱
     * @param password 密码
     * @return user model
     * @throws Exception 抛出所有异常
     */
    @Select({
            "select",
            "id, name, password, email, is_man, create_time",
            "from user",
            "where email = #{email,jdbcType=VARCHAR} and password = #{password,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "name", property = "name", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
            @Result(column = "is_man", property = "isMan", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP)
    })
    User hasMatchUser2(@Param("email") String email, @Param("password") String password) throws Exception;


    /**
     * 查询是否存在此用户
     *
     * @param name 用户名
     * @return >1则存在用户
     * @throws Exception 抛出所有异常
     */
    @Select("select count(*) from user where binary name = #{name}")
    Integer hasMatcherUsername1(@Param("name") String name) throws Exception;

    /**
     * 查询是否存在此用户
     *
     * @param email 用户名邮箱
     * @return >1则存在用户
     * @throws Exception 抛出所有异常
     */
    @Select("select count(*) from user where binary email = #{email}")
    Integer hasMatcherUsername2(@Param("email") String email) throws Exception;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Tue Dec 18 18:09:49 CST 2018
     */
    @Select({
            "select",
            "id, name, password, email, is_man, create_time",
            "from user"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.VARCHAR, id = true),
            @Result(column = "name", property = "name", jdbcType = JdbcType.VARCHAR),
            @Result(column = "password", property = "password", jdbcType = JdbcType.VARCHAR),
            @Result(column = "email", property = "email", jdbcType = JdbcType.VARCHAR),
            @Result(column = "is_man", property = "isMan", jdbcType = JdbcType.BIT),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP)
    })
    List<User> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated Tue Dec 18 18:09:49 CST 2018
     */
    @Update({
            "update user",
            "set name = #{name,jdbcType=VARCHAR},",
            "password = #{password,jdbcType=VARCHAR},",
            "email = #{email,jdbcType=VARCHAR},",
            "is_man = #{isMan,jdbcType=BIT},",
            "create_time = #{createTime,jdbcType=TIMESTAMP}",
            "where id = #{id,jdbcType=VARCHAR}"
    })
    int updateByPrimaryKey(User record);
}